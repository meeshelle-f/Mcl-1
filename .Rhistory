myCPM=cpm(countdata)
head(myCPM)
# a CPM of .5 corresponds to 10-15 for library sizes in this data set.
thresh = myCPM >.5
head(thresh) #generates logical matrix with T/F
table(rowSums(thresh)) #there are 11433 genes that have T in ALL 12 samples! Woah!
#1 sample, say basal.virgin, has 2 reps, so a total of size 2 for this 1 group. Recall that we keep a gene if at least 2 groups (total of size 4) have .5, so 4*.5=2
keep=rowSums(thresh)>=2
summary(keep) #15804 rows (genes) are true
plot(myCPM[,1],countdata[,1]) #check first sample, ensure cpm of .5 corresponds to 10-15
#plot to check linearity. recall x=myCPM
plot(myCPM[,1],countdata[,1], ylim=c(0,20),xlim=c(0,1))
abline(v=.5) # v = vertical line
abline(h=10)
y=y[keep, keep.lib.sizes=FALSE] #is this different than y[keep,]??
```
#Step 6.
```{r, quality control}
#ANALYZE LIBRARY SIZES
y$samples$lib.size #reads for each of 12 samples in y
#plot library sizes as a barplot
barplot(y$samples$lib.size)
#add x labels
barplot(y$samples$lib.size, names=colnames(y))
#make it fit
barplot(y$samples$lib.size, names=colnames(y),las=2, main=c("Barplot of library sizes"))
#adjust y axis size
barplot(y$samples$lib.size/1e06, names=colnames(y),las=2,main=c("Barplot of library sizes"))
#NORMALIZE COUNT DATA
logcounts=cpm(y,log=TRUE) #cpm normalizes count data
boxplot(logcounts, xlab="", ylab="log2 counts per million", las=2, main=c("log-transformed, unormalized")) #look at distributions
abline(h=median(logcounts),col="blue")#add median LogCPM
#MCL1.LA, MCL1.LB up and MCL1.LE and LF are down (below median)
```
plotMDS(y, col=col.cell)
legend("right",fill=c("purple", "orange"),legend=levels(sampleinfo$CellType))
title("Cell type")
plotMDS(y, col=col.status) #doesn't need to be a data frame apparently to be assigned
legend("right", fill=c("blue","red","black"), legend=levels(sampleinfo$Status))
title("Status")
plotMDS(y, col=col.cell)
legend("right",fill=c("purple", "orange"),legend=levels(sampleinfo$CellType))
title("Cell type")
#Bioconductor packages: limma, edgeR, Glimma, org.Mm.eg.db, gplots, RColorBrewer
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install(c("limma", "edgeR", "Glimma", "org.Mm.eg.db", "gplots", "RColorBrewer", "NMF", "BiasedUrn"))
library(edgeR)
library(limma)
library(Glimma)
library(org.Mm.eg.db)
library(gplots)
library(RColorBrewer)
library(NMF)
seqdata <- read.delim("~/GitHub/Mcl-1/GSE60450_LactationGenewiseCounts.txt", stringsAsFactors = FALSE)
sampleinfo <- samplinfo=read.delim("~/GitHub/Mcl-1/SampleInfo_Corrected.txt",stringsAsFactors=TRUE)
sampleinfo <- samplinfo=read.delim("~/GitHub/Mcl-1/SampleInfo_Corrected.txt",stringsAsFactors=TRUE)
sampleinfo = samplinfo=read.delim("~/GitHub/Mcl-1/SampleInfo_Corrected.txt",stringsAsFactors=TRUE)
sampleinfo
colnames(countdata)==sampleinfo$SampleName
table(colnames(countdata)==sampleinfo$SampleName) #OR convert both to a table, compare tables
group <- paste(sampleinfo$CellType,sampleinfo$Status,sep=".") #converts luminal and virgin to luminal.virgin
levels(sampleinfo$CellType) # "basal"   "luminal"
col.cell=c("purple", "orange")[sampleinfo$CellType] #purple for basal, orange for luminal
class(col.cell) #character
data.frame(sampleinfo$CellType,col.cell) #merge the two
plotMDS(y, col=col.cell)
title("Cell type")
plotMDS(y, col=col.cell)
legend("right",fill=c("purple", "orange"),legend=levels(sampleinfo$CellType))
title("Cell type")
levels(sampleinfo$Status)
col.status=c("blue","red","black")[sampleinfo$Status]
plotMDS(y, col=col.status) #doesn't need to be a data frame apparently to be assigned
legend("right", fill=c("blue","red","black"), legend=levels(sampleinfo$Status))
title("Status")
par(mfrow(c(1,2)) #plot side-by-side???
#plot 1
plotMDS(y, col=col.cell)
par(mfrow(c(1,2)) #plot side-by-side???
plotMDS(y, col=col.cell)
par(mfrow(c(1,2)) #plot side-by-side???
plotMDS(y, col=col.cell)
legend("right",fill=c("purple", "orange"),legend=levels(sampleinfo$CellType))
title("Cell type")
plotMDS(y, col=col.status) #doesn't need to be a data frame apparently to be assigned
legend("right", fill=c("blue","red","black"), legend=levels(sampleinfo$Status))
title("Status")
plotMDS(dim=c(1,2),col=col.status, pch=char.celltype, cex=2 )
plotMDS(y, dim=c(1,2),col=col.status, pch=char.celltype, cex=2 )
labels=paste(sampleinfo$SampleName,sampleinfo$CellType, sampleinfo$Status)
labels
glMDSPlot(y, labels=labels, groups=groups, folder="mds")
group
glMDSPlot(y, labels=labels, groups=group, folder="mds")
#select data for 50 most variable genes/ plot heatmap
#first estimate variance in each row (for each gene) by making a Logcounts matrix
var_genes=apply(logcounts,1,var)
head(var_genes)
#select data for 50 most variable genes/ plot heatmap
#first estimate variance in each row (for each gene) by making a Logcounts matrix
head(logcounts)
head(var_genes)
#select data for 50 most variable genes/ plot heatmap
#first estimate variance in each row (for each gene) by making a Logcounts matrix
head(logcounts)
head(var_genes)
select_var=names(sort(var_genes, decreasing =TRUE))[1:500]
head(select_var)
highly_variable_lcpm=logcounts[select_var,]
dim(highly_variable_1cpm)
dim(highly_variable_lcpm)
head(highly_variable_1cpm)
head(highly_variable_lcpm)
highly_variable_1cpm=logcounts[select_var,]
dim(highly_variable_1cpm)
head(highly_variable_1cpm)
rm(highly_variable_lcpm
rm(highly_variable_lcpm)
rm(highly_variable_lcpm)
head(highly_variable_1cpm)
rm(palete)
rm(mypalete)
mypalette=brewer.pal(11,"RdYlBu")
rm(mypalete)
morecols=colorRampPalette(mypalette)
col.cell
highly_variable_1cpm
length(highly_variable_1cpm)
dim(highly_variable_1cpm)
rowSums(logcounts)
min(logcounts)
max(logcounts)
apply?
)
#FUN=function
#returns vector if MARGIN=1
class(var_genes)
#FUN=function, take variance of rows =1
var(logcounts[1,])==var_genes[1,]
dim(logcounts)
dim(var_genes)
length(var_genes)
head(logcounts)
head(var_genes)
var(logcounts[1,])==table(var_genes[1,])
var(logcounts[1,])==var_genes[,1]
var(logcounts[1,])==
var_genes[,1]
var(logcounts[1,])==
var_genes[1m]
var(logcounts[1,])==
var_genes[1,]
class(logcounts)
class(var_genes)
dim(table(var_genes))
(table(var_genes[1,]))
head(var_genes)
var_genes[" 497097"]
var_genes(" 497097")
var_genes.table=as.marix(var_genes)
as.marix(var_genes)
var_genes.table=as.matrix(var_genes)
var_genes.table[1,]
var(logcounts[1,])==var_genes.table[1,]
highly_variable_1cpm=logcounts[select_var,] #pull out 500 variables in order from most to least variance
dim(highly_variable_1cpm) #500 genes 12 samples
heatmap.2(highly_variable_1cpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",ColSideColors=col.cell,scale="row")
# Save the heatmap
png(file="High_var_genes.heatmap.png")
heatmap.2(highly_variable_lcpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",ColSideColors=col.cell,scale="row")
heatmap.2(highly_variable_1cpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",ColSideColors=col.cell,scale="row")
dev.off()
quartz_off_screen
View(y)
# Apply normalisation to DGEList object
y <- calcNormFactors(y)
The normalization factors multiply to unity across all libraries. A normalization factor below one indicates that the library size will be scaleddown, as there is more suppression (i.e., composition bias) in that library relative to the other libraries. This is also equivalent to scaling thecounts upwards in that sample. Conversely, a factor above one scales up the library size and is equivalent to downscaling the counts.
y$samples #look at normalization factors for samples
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
par(mfrow=c(1,2))
plotMD(y,column =7)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
par(mfrow=c(1,2))
plotMD(logcounts,column =11)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
save(group,y,logcounts,sampleinfo,file="day1objects.Rdata")
png(file="y.png")
xlsx(file="y.xlsx")
xlsx(y,file="y.xlsx")
write.table(y,file="y.txt")
write.table(y$samples,file="calcNormFactorsy.txt")
rm(y.png)
#Challenge: Plot the biased and unbiased MD plots side by side for the same sample to see the before and afterTMM normalisation effect.
png(file="TMM_corrected_composition_bias_7.png")
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
#Challenge: Plot the biased and unbiased MD plots side by side for the same sample to see the before and afterTMM normalisation effect.
jpg(file="TMM_corrected_composition_bias_7.jpg")
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
y$samples
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
y
y$samples
par(mfrow=c(1,2))
plotMD(y,column =7)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
par(mfrow=c(1,2))
plotMD(logcounts,column =11)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
par(mfrow=c(2,4))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
par(mfrow=c(2,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
fornow=data.frame(y$samples)
fornow
View(fornow)
rm(fornow)
xlsx(y$samples,file="calcNormFactorsy.xlsx")
write.xlsx(y$samples,file="calcNormFactorsy.xlsx")
load("day1objects.Rdata")
objects()
group
levels(group)
levels(y$samples)
sampleinfo = samplinfo=read.delim("~/GitHub/Mcl-1/SampleInfo_Corrected.txt",stringsAsFactors=TRUE)
sampleinfo #see more about seqdata in sampleinfo
#Step 2.
```{r, formatting data}
#remove first 2 cols of seqdata (Entrez and length)
countdata=seqdata[,-(1:2)] #notice 2 cols are removed
rownames(countdata)=seqdata[,1] #Use entrez as row names of countdata
#reduce col names (sample names) in countdata using substr
colnames(countdata)=substr(colnames(countdata),start=1,stop=7) # extract characters starting at position 1 and stopping at position 7
#colnames of countdata now match that in sampleinfo under 'sample Name'. However we can verify this by using ==
length(table(colnames(countdata))) #table is a data frame, can use length or dim
length(sampleinfo$SampleName) # must use length for vectors and factors and lists
colnames(countdata)==sampleinfo$SampleName
table(colnames(countdata)==sampleinfo$SampleName) #OR convert both to a table, compare tables
```
countdata=seqdata[,-(1:2)] #notice 2 cols are removed
rownames(countdata)=seqdata[,1] #Use entrez as row names of countdata
#reduce col names (sample names) in countdata using substr
colnames(countdata)=substr(colnames(countdata),start=1,stop=7) # extract characters starting at position 1 and stopping at position 7
#colnames of countdata now match that in sampleinfo under 'sample Name'. However we can verify this by using ==
length(table(colnames(countdata))) #table is a data frame, can use length or dim
length(sampleinfo$SampleName) # must use length for vectors and factors and lists
colnames(countdata)==sampleinfo$SampleName
table(colnames(countdata)==sampleinfo$SampleName)
y=DGEList(countdata)
names(y) #slots stored in DGEList object, y:  "counts"  "samples"
y$samples # Library size information is stored in the samples slot
#store the groups for the samples in the DGEList object using paste
#paste(..., sep=" ")
#... is 1 or more R objects to be converted to character vectors
#sep is a character string to separate terms
group <- paste(sampleinfo$CellType,sampleinfo$Status,sep=".") #converts luminal and virgin to luminal.virgin
group
group = factor(group) #convert characters to factors
levels(group)
columns(org.Mm.eg.db)
#build annotation info in separate data frame using 'select'
#y$counts row names are the ENTREZIDs
#from org.Mm.. we will extract columns "ENTREZID","SYMBOL","GENENAME"
ann=select(org.Mm.eg.db,keys=rownames(y$counts),columns=c("ENTREZID","SYMBOL","GENENAME"))
head(ann)
#check that ENTREZID col in ann matches the rownames(y$counts)
length(rownames(y$counts))
length(ann$ENTREZID)
table(rownames(y$counts)==ann$ENTREZID) #use table as it produces much shorter output
#notice y$ only has the two slots
y$genes <- ann # slot in the annotation info into the genes slot of y. Now we there are 3 slots yay!
myCPM=cpm(countdata)
head(myCPM)
# a CPM of .5 corresponds to 10-15 for library sizes in this data set.
thresh = myCPM >.5
head(thresh) #generates logical matrix with T/F
table(rowSums(thresh)) #there are 11433 genes that have T in ALL 12 samples! Woah!
#1 sample, say basal.virgin, has 2 reps, so a total of size 2 for this 1 group. Recall that we keep a gene if at least 2 groups (total of size 4) have .5, so 4*.5=2
keep=rowSums(thresh)>=2
summary(keep) #15804 rows (genes) are true
plot(myCPM[,1],countdata[,1]) #check first sample, ensure cpm of .5 corresponds to 10-15
#plot to check linearity. recall x=myCPM
plot(myCPM[,1],countdata[,1], ylim=c(0,20),xlim=c(0,1))
abline(v=.5) # v = vertical line
abline(h=10)
y=y[keep, keep.lib.sizes=FALSE] #is this different than y[keep,]??
y$samples$lib.size #reads for each of 12 samples in y
#plot library sizes as a barplot
barplot(y$samples$lib.size)
#add x labels
barplot(y$samples$lib.size, names=colnames(y))
#make it fit
barplot(y$samples$lib.size, names=colnames(y),las=2, main=c("Barplot of library sizes"))
#adjust y axis size
barplot(y$samples$lib.size/1e06, names=colnames(y),las=2,main=c("Barplot of library sizes"))
#NORMALIZE COUNT DATA
logcounts=cpm(y,log=TRUE) #cpm normalizes count data
rm(samplinfo)
labels=paste(sampleinfo$SampleName,sampleinfo$CellType, sampleinfo$Status)
dim(logcounts) # 15804    12
head(logcounts)
class(logcounts) # "matrix" "array"
var_genes=apply(logcounts,1,var) #497097 is the first geneID
#FUN=function, take variance of rows =1
length(var_genes) #15804
head(var_genes)
class(var_genes) #numeric
var_genes.table=as.matrix(var_genes)
var_genes.table[1,]
var(logcounts[1,])==var_genes.table[1,] #proof that variance matches
select_var=names(sort(var_genes, decreasing =TRUE))[1:500]
head(select_var)
highly_variable_1cpm=logcounts[select_var,] #pull out 500 variables in order from most to least variance
dim(highly_variable_1cpm) #500 genes and data corresponding to all 12 samples
head(highly_variable_1cpm)
mypalette=brewer.pal(11,"RdYlBu")
morecols=colorRampPalette(mypalette)
heatmap.2(highly_variable_1cpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",ColSideColors=col.cell,scale="row")
# Save the heatmap
png(file="High_var_genes.heatmap.png")
heatmap.2(highly_variable_1cpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",ColSideColors=col.cell,scale="row")
y <- calcNormFactors(y)
write.table(y$samples,file="calcNormFactorsy.txt")
y$samples #normalization factors attached for samples
# normalization factors multiply to unity across all libraries. A normalization factor <1 indicates library size will be scaled down, as there is more suppression (i.e., composition bias) in that library relative to the other libraries. Conversely, a factor >1 scales up the library size and is equivalent to downscaling the counts. NOTICE the last 2 samples (LE, LF) have much smaller normalization factors, and MCL1.LA and MCL1.LB have the largest.
#If we plot mean difference plots using  plotMD for these samples, we should be able to see the composition bias problem. We will use the logcounts, which have been normalized for library size, but not for composition bias like y has using calcNormFactors.
par(mfrow=c(2,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
save(group,y,logcounts,sampleinfo,file="day1objects.Rdata")
load("day1objects.Rdata")
objects() #6 is "group" and 21 is "y"
group
# Specify a design matrix without an intercept term
design <- model.matrix(~0+ group)
design
## Make the column names of the design matrix a bit nicer
colnames(design) <- levels(group)
design
par(mfrow=c(1,1))
v <- voom(y,design,plot = TRUE)
v
v$E
names(v)
par(mfrow=c(1,2))
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(v$E, xlab="", ylab="Log2 counts per million",las=2,main="Voom transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
par(mfrow=c(2,2))
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(v$E, xlab="", ylab="Log2 counts per million",las=2,main="Voom transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(y$samples, xlab="", ylab="Log2 counts per million",las=2,main="Calc.Norm.Function transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
par(mfrow=c(2,2))
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(v$E, xlab="", ylab="Log2 counts per million",las=2,main="Voom transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(y$counts, xlab="", ylab="Log2 counts per million",las=2,main="Calc.Norm.Function transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
boxplot(logcounts, xlab="", ylab="log2 counts per million", las=2, main=c("log-transformed, unormalized")) #look at distributions
abline(h=median(logcounts),col="blue")#add median LogCPM
#MCL1.LA, MCL1.LB up and MCL1.LE and LF are down (below median)
par(mfrow=c(2,2))
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(v$E, xlab="", ylab="Log2 counts per million",las=2,main="Voom transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(y$counts, xlab="", ylab="Log2 counts per million",las=2,main="Calc.Norm.Function transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
par(mfrow=c(2,2))
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(v$E, xlab="", ylab="Log2 counts per million",las=2,main="Voom transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(y$counts, xlab="", ylab="Log2 counts per million",las=2,main="Calc.Norm.Function transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
# Apply normalization to DGEList object y using calcNormFactors
y <- calcNormFactors(y)
y
y$samples
par(mfrow=c(2,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(y,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
plotMD(y,column =11)
abline(h=0,col="grey")
v$E
y$genes
View(v)
names(v) #use names to determine what is contained within the object, v. "genes"   "targets" "E"   "weights" "design"
View(y)
View(logcounts)
par(mfrow=c(1,2))
plotMD(logcounts,column =7)
abline(h=0,col="grey")
plotMD(logcounts,column =11)
abline(h=0,col="grey")
par(mfrow=c(1,2))
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,main="Unnormalised logCPM")
## add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
boxplot(v$E, xlab="", ylab="Log2 counts per million",las=2,main="Voom transformed logCPM")
## Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(v$E),col="blue")
# Fit the linear model
fit <- lmFit(v)
# Fit the linear model
fit <- lmFit(v)
names(fit)
cont.matrix <- makeContrasts(B.PregVsLac=basal.pregnant - basal.lactate,levels=design)
group
cont.matrix
fit
View(fit)
fit.cont <- eBayes(fit.cont)
fit.cont <- contrasts.fit(fit, cont.matrix)
fit.cont <- eBayes(fit.cont)
summa.fit <- decideTests(fit.cont)
summary(summa.fit)
dim(fit.cont)
?vennDiagram
vennDiagram(fit)
vennDiagram(fit.cont)
vennDiagram(summa.fit)
head(seqdata) #1 gene per row, 1st col is Entrez ID, 2nd col is gene length, there are 2 reps per cell type and time point
